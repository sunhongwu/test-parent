<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <!--指定pom模型的版本，对于maven2和maven3来说，只能是4.0.0-->
  <modelVersion>4.0.0</modelVersion>
  <!--接下来三个元素是定义一个项目的基本坐标-->
  <!--定义该项目属于哪个组，这个组往往和项目所在的组织或公司存在关联-->
  <groupId>com.shw.test</groupId>
  <!--定义当前maven项目在组织中的唯一ID-->
  <artifactId>test-parent</artifactId>
  <!--定义当前项目的版本-->
  <version>1.0.2</version>
  <!--项目的打包类型 默认为jar-->
  <packaging>pom</packaging>
  <!--项目友好的名称，用于用户间交流-->
  <name>我的测试项目</name>
  <!--项目描述信息，用于项目文档-->
  <description>测试项目站点</description>
  <!--项目地址信息，用于项目文档-->
  <url>http://maven.apache.org</url>

  <!--项目组织信息-->
  <organization>
    <name>shw.com</name>
    <url>http://shw.com.cn</url>
  </organization>
  <!--源码仓库信息-->
  <scm>
    <!--只读的scm地址-->
    <connection>scm:git:https://github.com/sunhongwu/test-parent.git</connection>
    <!--可写的scm地址-->
    <developerConnection>scm:git:https://github.com/sunhongwu/test-parent.git</developerConnection>
    <!--可以在浏览器访问的scm地址-->
    <url>https://github.com/sunhongwu/test-parent.git</url>
    <tag>test-parent-1.0.2</tag>
  </scm>

  <!--持续集成服务器信息-->
  <ciManagement>
    <system>jikeins</system>
    <url>http://jikeins</url>
  </ciManagement>

  <!--项目成员团队信息-->
  <developers>
    <developer>
      <id>shw</id>
      <name>孙洪武</name>
      <email>sunhongwu@gomeholdings.com</email>
      <timezone>8</timezone>
    </developer>
  </developers>

  <!--贡献者-->
  <contributors>

  </contributors>

  <!--邮件列表-->
  <mailingLists>
    <mailingList>

    </mailingList>
  </mailingLists>

  <!--问题追踪系统信息-->
  <issueManagement>
    <system>jira</system>
    <url>http//jira</url>
  </issueManagement>

  <!--许可证信息-->
  <licenses>
    <license>
      <name>证书</name>
      <url>http://shw</url>
    </license>
  </licenses>

  <!--项目报告插件-->
  <reporting>
    <plugins>
      <!--生成javadoc文档-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.0.0</version>
      </plugin>
      <!--在站点浏览源码-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jxr-plugin</artifactId>
        <version>2.5</version>
        <!--聚合项目源码交叉引用报告-->
        <configuration>
          <aggregate>true</aggregate>
        </configuration>
      </plugin>
      <!--编码规范报告-->
      <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-checkstyle-plugin</artifactId>
          <version>3.0.0</version>
      </plugin>
      <!--源代码分析-->
      <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-pmd-plugin</artifactId>
          <version>3.7</version>
          <!--聚合项目源码交叉引用报告-->
          <configuration>
              <aggregate>true</aggregate>
          </configuration>
      </plugin>
      <!--版本控制系统的变更记录报告-->
      <!--<plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-changelog-plugin</artifactId>
          <version>2.3</version>
          &lt;!&ndash;最近60天&ndash;&gt;
          <configuration>
              <type>range</type>
              <range>60</range>
          </configuration>
        </plugin>-->
      <!--测试覆盖率报告-->
      <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>cobertura-maven-plugin</artifactId>
          <version>2.7</version>
      </plugin>
    </plugins>
  </reporting>

  <modules>
    <module>account-email</module>
    <module>account-presist</module>
    <module>account-captcha</module>
    <module>account-service</module>
    <module>account-web</module>
  </modules>

  <!--依赖优化
  mvn dependency:list   已解析依赖
  mvn dependency:tree   已解析依赖树
  mvn dependency:analyze 分析当前项目依赖
  1）分析出当前使用了的，但是没有显示声明的依赖
  2）显示声明了，但是没有在项目中直接使用的依赖
  这个命令不能分析出除当前项目代码外对显示声明的jar包的依赖，比如：
  当前代码中没有使用spring-beans，但是ioc容器启动的时候，spring内部使用了这个
  spring-beans依赖，那么使用这个命令的时候，就会认为这个spring-beans是显示声明但是没有使用的依赖-->
  <!--插件信息查看
  mvn help:describe -Dplugin=source -Ddetail
  -Dgoal=目标名称，查看单个目标的信息
  查看插件的目标、目标的默认绑定阶段
  执行顺序按照阶段的顺序和目标声明的顺序
  -Da=b -D是java自带的，设置java系统属性，maven利用这一特性，
  在准备插件之前会检查系统属性，配置插件
  pom文件中配置的插件参数，是插件的全局参数，所有目标共用-->
  <!--查看系统环境变量 mvn help:system-->
  <!--maven属性-->
  <properties>
    <!--指定maven读取文档和源码编码-->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!--指定maven用什么编码呈现站点的html文档-->
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <!--依赖归类-->
    <org.springframework.version>4.3.10.RELEASE</org.springframework.version>
    <javax.mail.version>1.4.1</javax.mail.version>
    <com.icegreen.version>1.3.1b</com.icegreen.version>
    <testng.version>6.13.1</testng.version>
    <dom4j.version>1.6.1</dom4j.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.testng</groupId>
      <artifactId>testng</artifactId>
      <version>${testng.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <!--项目依赖管理-->
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-core</artifactId>
        <version>${org.springframework.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-beans</artifactId>
        <version>${org.springframework.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-context</artifactId>
        <version>${org.springframework.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-context-support</artifactId>
        <version>${org.springframework.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-web</artifactId>
        <version>${org.springframework.version}</version>
      </dependency>
      <dependency>
        <groupId>dom4j</groupId>
        <artifactId>dom4j</artifactId>
        <version>${dom4j.version}</version>
      </dependency>
      <dependency>
        <groupId>javax.mail</groupId>
        <artifactId>mail</artifactId>
        <version>${javax.mail.version}</version>
      </dependency>
      <dependency>
        <groupId>com.icegreen</groupId>
        <artifactId>greenmail</artifactId>
        <version>${com.icegreen.version}</version>
        <scope>test</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>
  <!--项目发布-->
  <distributionManagement>
    <site>
      <id>site</id>
      <url>dav:http://localhost:8080/webdav/</url>
    </site>
    <repository>
      <id>distribution</id>
      <name>release</name>
      <url>http://10.143.117.11:8081/nexus/content/groups/shw-group</url>
    </repository>
  </distributionManagement>
  <!--项目构建配置-->
  <build>
    <!--标注项目生成的主构件的名称-->
    <!--<finalName>web-war</finalName>-->

    <!--设置主要资源文件过滤（maven属性替换）-->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>

    <!--设置测试资源文件过滤（maven属性替换）-->
    <testResources>
      <testResource>
        <directory>src/test/resources</directory>
        <filtering>true</filtering>
      </testResource>
    </testResources>

    <!--构建功能扩展-->
    <extensions>
      <extension>
        <groupId>org.apache.maven.wagon</groupId>
        <artifactId>wagon-webdav-jackrabbit</artifactId>
        <version>3.0.0</version>
      </extension>
    </extensions>
    <pluginManagement>
      <plugins>
        <!--指定编译jdk版本,因为maven的内置阶段绑定，子模块不用显示声明就可以生效-->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <configuration>
            <source>1.7</source>
            <target>1.7</target>
          </configuration>
        </plugin>
        <!--设置处理资源文件使用的编码,因为maven的内置阶段绑定，子模块不用显示声明就可以生效-->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-resources-plugin</artifactId>
          <configuration>
            <encoding>utf-8</encoding>
          </configuration>
        </plugin>
        <!--项目源码编译打包-->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-source-plugin</artifactId>
          <version>2.1.1</version>
          <executions>
            <execution>
              <id>生成项目源码jar包</id>
              <phase>verify</phase>
              <goals>
                <goal>jar-no-fork</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <!--生成项目站点-->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-site-plugin</artifactId>
          <version>3.6</version>
          <dependencies>
            <dependency><!-- add support for ssh/scp -->
              <groupId>org.apache.maven.wagon</groupId>
              <artifactId>wagon-ssh</artifactId>
              <version>1.0</version>
            </dependency>
          </dependencies>
          <!--配置当地语言-->
          <configuration>
            <locales>zh_CN</locales>
          </configuration>
        </plugin>
        <!--测试插件-->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.5</version>
          <!--解决编码问题-->
          <configuration>
            <forkMode>once</forkMode>
            <argLine>-Dfile.encoding=UTF-8</argLine>
          </configuration>
        </plugin>
        <!--测试代码生成jar包-->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>2.2</version>
          <executions>
            <execution>
              <goals>
                <goal>test-jar</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-release-plugin</artifactId>
        <version>2.5.3</version>
        <configuration>
          <username>sunhongwu</username>
          <password>shwsunhongwu5</password>
          <tagBase>https://github.com/sunhongwu/test-parent.git</tagBase>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
